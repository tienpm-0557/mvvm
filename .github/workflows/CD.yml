name: CD
on:
  push:
    branches:
        - master
  
  pull_request:
    branches:
        - master
    paths:
      - './MVVMExample'
      
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-11
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2
      - name: Apply Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate_dist.p12
          PP_PATH=$RUNNER_TEMP/Template_Dist.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Update Dependency
        working-directory: ./MVVMExample
        run: |
          pod install
          
      - name: Archive File IPA & Upload to TestFlight
        working-directory: ./MVVMExample
        env:
          EXPORT_SCHEME: "MVVMExample"
          EXPORT_WORKSPACE: "MVVMExample.xcworkspace"
          EXPORT_DIR: "./output"
          EXPORT_PRIVATE_KEYS_DIR: "./private_keys"
          EXPORT_DIR_IPA: "$EXPORT_DIR/MVVMExample.ipa"
          EXPORT_ARCHIVE_DIR: "$EXPORT_DIR/MVVMExample.xcarchive"
          EXPORT_DESTINATION: "generic/platform=iOS"
          EXPORT_OPTIONS_PLIST_DIR: "./config/export-config.plist"

          APP_CONNECT_USER_ID: ${{ secrets.APP_CONNECT_USER_ID }}
          APP_CONNECT_KEY_ID: ${{ secrets.APP_CONNECT_KEY_ID }}
          APP_CONNECT_PRIVATE_KEY: ${{ secrets.APP_CONNECT_PRIVATE_KEY }}

        run: |
          # Remove previous export folder
          rm -rf "$EXPORT_DIR"
          # Start archive project
          set -o pipefail && xcodebuild \
            -workspace "./$EXPORT_WORKSPACE" \
            -scheme "$EXPORT_SCHEME" \
            -destination "$EXPORT_DESTINATION" \
            -archivePath "$EXPORT_ARCHIVE_DIR" \
            archive;
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath "$EXPORT_ARCHIVE_DIR" \
            -exportPath "$EXPORT_DIR" \
            -exportOptionsPlist "$EXPORT_OPTIONS_PLIST_DIR" \
            -allowProvisioningUpdates;
            
          rm -rf "$EXPORT_ARCHIVE_DIR"

          if [ ! -f "$EXPORT_DIR_IPA" ]
          then
            echo "IPA not found!"
          else
            mkdir "$EXPORT_PRIVATE_KEYS_DIR"
            echo "$APP_CONNECT_PRIVATE_KEY" >> "$EXPORT_PRIVATE_KEYS_DIR/AuthKey_${APP_CONNECT_KEY_ID}.p8"
            echo "Start upload ipa to TestFlight!"
            xcrun altool --upload-app --type ios --file $EXPORT_DIR_IPA --apiKey $APP_CONNECT_KEY_ID  --apiIssuer $APP_CONNECT_USER_ID
          fi
          
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/Template_Dist.mobileprovision
  
